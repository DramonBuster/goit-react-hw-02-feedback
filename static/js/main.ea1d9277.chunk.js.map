{"version":3,"sources":["Components/Section/Section.js","Components/FeedbackButtons/FeedbackButtons.js","Components/FeedbackStatistics/FeedbackStatistics.js","App.js","reportWebVitals.js","index.js"],"names":["SectionWrapper","styled","section","Title","h2","Section","title","children","Wrapper","div","Button","button","FeedbackButtons","feedbacks","submitFeedback","map","feedback","type","onClick","StatisticsItem","p","FeedbackStatistics","good","neutral","bad","total","positivePercentage","defaultProps","Container","Notification","App","state","setState","prevState","countTotalFeedback","countPositiveFeedbackPercentage","Math","round","this","Object","keys","Component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"0TAGMA,EAAiBC,IAAOC,QAAV,mEAKdC,EAAQF,IAAOG,GAAV,yJAqBIC,EAXC,SAAC,GAAD,IAAGC,EAAH,EAAGA,MAAOC,EAAV,EAAUA,SAAV,OACd,eAACP,EAAD,WACE,cAACG,EAAD,UAAQG,IACR,8BAAMC,QClBJC,EAAUP,IAAOQ,IAAV,iFAKPC,EAAST,IAAOU,OAAV,wTAmCGC,EAnBS,SAAC,GAAD,IAAGC,EAAH,EAAGA,UAAWC,EAAd,EAAcA,eAAd,OACtB,cAACN,EAAD,UACGK,EAAUE,KAAI,SAAAC,GAAQ,OACrB,cAACN,EAAD,CACEO,KAAK,SAELC,QAAS,kBAAMJ,EAAeE,IAHhC,SAKGA,GAHIA,SC1BPR,EAAUP,IAAOQ,IAAV,oIAOPU,EAAiBlB,IAAOmB,EAAV,sMAadC,EAAqB,SAAC,GAMrB,IALLC,EAKI,EALJA,KACAC,EAII,EAJJA,QACAC,EAGI,EAHJA,IACAC,EAEI,EAFJA,MACAC,EACI,EADJA,mBAEA,OACE,gCACE,eAAC,EAAD,WACE,eAACP,EAAD,oBAAuBG,KACvB,eAACH,EAAD,uBAA0BI,KAC1B,eAACJ,EAAD,mBAAsBK,QAExB,eAACL,EAAD,qBAAwBM,KACxB,eAACN,EAAD,iCAAoCO,EAApC,YAKNL,EAAmBM,aAAe,CAChCF,MAAO,EACPC,mBAAoB,GAWPL,I,IAAAA,ICjDTO,EAAY3B,IAAOQ,IAAV,oFAMToB,EAAe5B,IAAOmB,EAAV,kLAWZU,E,4MACJC,MAAQ,CACNT,KAAM,EACNC,QAAS,EACTC,IAAK,G,EAGPV,eAAiB,SAAAE,GAEf,EAAKgB,UAAS,SAAAC,GAAS,sBACpBjB,EAAWiB,EAAUjB,GAAY,O,EAItCkB,mBAAqB,WAEnB,OADc,EAAKH,MAAMT,KAAO,EAAKS,MAAMR,QAAU,EAAKQ,MAAMP,K,EAIlEW,gCAAkC,WAChC,IAAMV,EAAQ,EAAKS,qBACnB,OAAc,IAAVT,EACK,EAEkBW,KAAKC,MAAO,EAAKN,MAAMT,KAAOG,EAAS,M,4CAIpE,WACE,MAA+Ba,KAAKP,MAA5BT,EAAR,EAAQA,KAAMC,EAAd,EAAcA,QAASC,EAAvB,EAAuBA,IACjBC,EAAQa,KAAKJ,qBACnB,OACE,eAACN,EAAD,WACE,cAAC,EAAD,CAAStB,MAAM,wBAAf,SACE,cAAC,EAAD,CACEO,UAAW0B,OAAOC,KAAKF,KAAKP,OAC5BjB,eAAgBwB,KAAKxB,mBAIzB,cAAC,EAAD,CAASR,MAAM,aAAf,SACGmB,EAAQ,EACP,cAAC,EAAD,CACEH,KAAMA,EACNC,QAASA,EACTC,IAAKA,EACLC,MAAOA,EACPC,mBAAoBY,KAAKH,oCAG3B,cAACN,EAAD,0C,GAlDMY,aA0DHX,ICtEAY,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.ea1d9277.chunk.js","sourcesContent":["import PropTypes from 'prop-types';\nimport styled from 'styled-components';\n\nconst SectionWrapper = styled.section`\n  padding: 0;\n  margin-bottom: 30px;\n`;\n\nconst Title = styled.h2`\n  margin-top: 0;\n  margin-bottom: 40px;\n  text-align: center;\n\n  font-size: 20px;\n  font-weight: 700;\n  color: black;\n`;\n\nconst Section = ({ title, children }) => (\n  <SectionWrapper>\n    <Title>{title}</Title>\n    <div>{children}</div>\n  </SectionWrapper>\n);\n\nSection.propTypes = {\n  title: PropTypes.string.isRequired,\n};\n\nexport default Section;\n","import PropTypes from 'prop-types';\nimport styled from 'styled-components';\n\nconst Wrapper = styled.div`\n  display: flex;\n  justify-content: space-between;\n`;\n\nconst Button = styled.button`\n  border-radius: 50%;\n  border: 1px solid black;\n  padding: 5px 10px;\n  min-width: 80px;\n  cursor: pointer;\n  color: white;\n  background-color: rgba(39, 164, 236);\n\n  font-weight: 600;\n  font-size: 16px;\n  line-height: 1.875;\n  align-items: center;\n  text-align: center;\n`;\n\nconst FeedbackButtons = ({ feedbacks, submitFeedback }) => (\n  <Wrapper>\n    {feedbacks.map(feedback => (\n      <Button\n        type=\"button\"\n        key={feedback}\n        onClick={() => submitFeedback(feedback)}\n      >\n        {feedback}\n      </Button>\n    ))}\n  </Wrapper>\n);\n\nFeedbackButtons.propTypes = {\n  feedbacks: PropTypes.array.isRequired,\n  submitFeedback: PropTypes.func.isRequired,\n};\n\nexport default FeedbackButtons;\n","import PropTypes from 'prop-types';\nimport styled from 'styled-components';\n\nconst Wrapper = styled.div`\n  display: flex;\n  flex-direction: column;\n  justify-content: space-between;\n  margin-bottom: 30px;\n`;\n\nconst StatisticsItem = styled.p`\n  margin-top: 0;\n  margin-bottom: 10px;\n  text-align: left;\n  font-size: 20px;\n  font-weight: 700;\n  color: black;\n\n  :last-child {\n    margin-bottom: 0px;\n  }\n`;\n\nconst FeedbackStatistics = ({\n  good,\n  neutral,\n  bad,\n  total,\n  positivePercentage,\n}) => {\n  return (\n    <div>\n      <Wrapper>\n        <StatisticsItem>Good: {good}</StatisticsItem>\n        <StatisticsItem>Neutral: {neutral}</StatisticsItem>\n        <StatisticsItem>Bad: {bad}</StatisticsItem>\n      </Wrapper>\n      <StatisticsItem>Total: {total}</StatisticsItem>\n      <StatisticsItem>Positive feedback: {positivePercentage} %</StatisticsItem>\n    </div>\n  );\n};\n\nFeedbackStatistics.defaultProps = {\n  total: 0,\n  positivePercentage: 0,\n};\n\nFeedbackStatistics.propTypes = {\n  good: PropTypes.number.isRequired,\n  neutral: PropTypes.number.isRequired,\n  bad: PropTypes.number.isRequired,\n  total: PropTypes.number.isRequired,\n  positivePercentage: PropTypes.number.isRequired,\n};\n\nexport default FeedbackStatistics;\n","import React, { Component } from 'react';\nimport './App.css';\nimport Section from './Components/Section/Section';\nimport FeedbackButtons from './Components/FeedbackButtons/FeedbackButtons';\nimport FeedbackStatistics from './Components/FeedbackStatistics/FeedbackStatistics';\nimport styled from 'styled-components';\n\nconst Container = styled.div`\n  margin: 0 auto;\n  padding: 0 15px;\n  width: 300px;\n`;\n\nconst Notification = styled.p`\n  margin-bottom: 40px;\n  text-align: center;\n  padding: 5px;\n\n  font-size: 20px;\n  font-weight: 700;\n  color: black;\n  background-color: red;\n`;\n\nclass App extends Component {\n  state = {\n    good: 0,\n    neutral: 0,\n    bad: 0,\n  };\n\n  submitFeedback = feedback => {\n    // проверить позже\n    this.setState(prevState => ({\n      [feedback]: prevState[feedback] + 1,\n    }));\n  };\n\n  countTotalFeedback = () => {\n    const total = this.state.good + this.state.neutral + this.state.bad;\n    return total;\n  };\n\n  countPositiveFeedbackPercentage = () => {\n    const total = this.countTotalFeedback();\n    if (total === 0) {\n      return 0;\n    }\n    const positivePercentage = Math.round((this.state.good / total) * 100);\n    return positivePercentage;\n  };\n\n  render() {\n    const { good, neutral, bad } = this.state;\n    const total = this.countTotalFeedback();\n    return (\n      <Container>\n        <Section title=\"Please leave feedback\">\n          <FeedbackButtons\n            feedbacks={Object.keys(this.state)}\n            submitFeedback={this.submitFeedback}\n          />\n        </Section>\n\n        <Section title=\"Statistics\">\n          {total > 0 ? (\n            <FeedbackStatistics\n              good={good}\n              neutral={neutral}\n              bad={bad}\n              total={total}\n              positivePercentage={this.countPositiveFeedbackPercentage()}\n            />\n          ) : (\n            <Notification>No feedback given!</Notification>\n          )}\n        </Section>\n      </Container>\n    );\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}